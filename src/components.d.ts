/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Locale } from "./models/locale";
import { CustomContent, Novl } from "./models/novl";
import { Breakpoints, Grid } from "./data/novl-carousel";
export { Locale } from "./models/locale";
export { CustomContent, Novl } from "./models/novl";
export { Breakpoints, Grid } from "./data/novl-carousel";
export namespace Components {
    interface UrAvatar {
        "border": string;
        "name"?: string;
        "radius": string;
        "size": string;
        "src": string;
    }
    interface UrButton {
        "disabled": boolean;
        "endIcon": any;
        "fullWidth": boolean;
        "icon": any;
        "variant": 'elevated' | 'filled' | 'tonal' | 'outlined' | 'text';
    }
    interface UrButtonArrowLeft {
        "disabled": boolean;
    }
    interface UrButtonArrowRight {
        "disabled": boolean;
    }
    interface UrButtonIcon {
        "disabled": boolean;
        "icon": string;
        "loading": boolean;
        "selected": boolean;
        "selectedIcon"?: string;
        "variant": 'standard' | 'filled' | 'tonal' | 'outlined';
    }
    interface UrCheckbox {
        /**
          * Indicates if the checkbox is checked
         */
        "checked": boolean;
        /**
          * Indicates if the checkbox is disabled
         */
        "disabled": boolean;
        /**
          * The name of the checkbox group
         */
        "name": string;
        /**
          * The value of the checkbox
         */
        "value": string;
    }
    interface UrCheckboxGroup {
        /**
          * Maximum number of selectable options
         */
        "maxSelectable": number | null;
        /**
          * The name of the checkbox group
         */
        "name": string;
        /**
          * Whether the group is required
         */
        "required": boolean;
        /**
          * Reset the checkbox group
         */
        "reset": () => Promise<void>;
        /**
          * Enable a "Select All" checkbox
         */
        "selectAll": boolean;
        /**
          * Text for the "Select All" checkbox
         */
        "selectAllText": string;
        /**
          * Validate the checkbox group
         */
        "validate": () => Promise<boolean>;
        /**
          * Currently selected values
         */
        "values": string[];
    }
    interface UrChip {
        "backColor": string;
        "border": string;
        "disabled": boolean;
        "fontColor": string;
        "label": string;
        "loading": boolean;
        "radius": string;
        "size": string;
    }
    interface UrDialog {
        "borderRadius": string | null;
        "closeDialog": () => Promise<void>;
        "closeOnEsc": boolean;
        "closeOnOverlayClick": boolean;
        "description": string | null;
        "fullscreen": boolean;
        "open": boolean;
        "openDialog": () => Promise<void>;
    }
    interface UrHero {
        "backgroundAlignment": 'left' | 'center' | 'right';
        "backgroundColor": string;
        "backgroundImage": string;
        "backgroundJustification": 'top' | 'center' | 'bottom';
        "ctaText": string;
        "heroSubtitle": string;
        "heroSubtitleColor": string;
        "heroTitle": string;
        "heroTitleColor": string;
        "layout": 'left' | 'right' | 'center';
    }
    interface UrLinearProgress {
        /**
          * The maximum value of the progress indicator.
         */
        "max": number;
        /**
          * The current value of the progress indicator. If null or undefined, the progress is indeterminate.
         */
        "value": number | null;
    }
    interface UrList {
    }
    interface UrListItem {
        "active": boolean;
        "alignment": 'start' | 'center' | 'end';
        "content"?: string;
        "description"?: string;
        "disabled": boolean;
        "endIcon"?: string;
        "href"?: string;
        "icon"?: string;
        "nonclickable": boolean;
        "rel"?: string;
        "rounded": boolean;
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface UrListSubheader {
        "text": string;
    }
    interface UrLoader {
    }
    interface UrLocaleFilterButton {
        "count": number;
        "selected": boolean;
    }
    interface UrLocaleFilterPanel {
        "disabledLocales": string[];
        /**
          * List of available languages
         */
        "locales": Array<Locale>;
        /**
          * Whether to show the footer
         */
        "showFooter": boolean;
        /**
          * Whether to show the header
         */
        "showHeader": boolean;
    }
    interface UrLogo {
        /**
          * Color of the logo
         */
        "color": string;
        /**
          * Height of the logo
         */
        "height": string;
        /**
          * Opacity of the logo
         */
        "opacity": number;
        /**
          * Rotation angle of the logo in degrees
         */
        "rotation": number;
        /**
          * Width of the logo
         */
        "width": string;
    }
    interface UrMainDesktopTopAppBar {
        "logoOpacity": number;
        "logoRotation": number;
        "searchText": string;
        "variant": string;
    }
    interface UrMainLeftMenu {
        "loggedIn": boolean;
        "opened": boolean;
        "userAvatar"?: string;
        "userName"?: string;
        "userRole"?: string;
    }
    interface UrMenuItem {
        "disabled": boolean;
        "label": string;
        "selected": boolean;
        "value": string;
    }
    interface UrMenuProfile {
        "userAvatar"?: string;
        "userName"?: string;
        "userRole"?: string;
    }
    interface UrNavigationDrawer {
        "closeDrawer": () => Promise<void>;
        /**
          * Closes the drawer when the 'Esc' key is pressed
         */
        "closeOnEsc": boolean;
        /**
          * Closes the drawer when clicking outside of it
         */
        "closeOnOverlayClick": boolean;
        /**
          * Contains the drawer within its parent element
         */
        "contained": boolean;
        /**
          * Determines if the drawer is open
         */
        "open": boolean;
        "openDrawer": () => Promise<void>;
        /**
          * Placement of the drawer: 'left' or 'right'
         */
        "placement": 'left' | 'right';
    }
    interface UrNovl {
        "authorAvatar": any;
        "authorName": any;
        "borderRadius": string;
        "likes": number;
        "loading": boolean;
        "novlCover": any;
        "novlCoverFallback": string;
        "novlDescription": any;
        "novlId": any;
        "novlTitle": string;
        "price": string | null;
        "published": boolean;
        "publisherAvatar": string | null;
        "publisherName": string | null;
        "showStats": boolean;
        "views": number;
    }
    interface UrNovlCarousel {
        "addNovls": (novls: Array<Novl | CustomContent>) => Promise<void>;
        "breakpoints"?: Breakpoints;
        "destroyListeners": boolean;
        "grid"?: Grid;
        "loading": boolean;
        "navigation"?: boolean;
        "novls": Array<Novl | CustomContent>;
        "slidesPerView"?: number | 'auto';
        "spaceBetween"?: number | string;
        "updateNovlsByIndex": (updates: Map<number, Novl | CustomContent>) => Promise<void>;
    }
    interface UrPage {
        "followers": number;
        "pageCover": any;
        "pageCoverFallback": string;
        "pageDescription": any;
        "pageTitle": string;
        "showStats": boolean;
    }
    interface UrPageProfile {
        "avatar": any;
        "description": any;
        "email": any;
        "facebook_url": any;
        "followers": number | null;
        "following": number | null;
        "genres": string | null;
        "languages": string | null;
        "linkedin_url": any;
        "literatureTypes": string | null;
        "location": any;
        "members": number | null;
        "name": any;
        "pageCreationDate": any;
        "pageCreatorImage": any;
        "pageCreatorName": any;
        "phone": any;
        "showBecomeMember": boolean;
        "showDonate": boolean;
        "showFollow": boolean;
        "showSendMessage": boolean;
        "stories": number | null;
        "twitter_url": any;
        "views": number | null;
        "website": any;
    }
    interface UrProfile {
        "description": any;
        "email": any;
        "facebook_url": any;
        "followers_count": number;
        "genres": string;
        "languages": string;
        "linkedin_url": any;
        "location": any;
        "member_since": string;
        "name": any;
        "phone": any;
        "show_become_member": boolean;
        "show_donate": boolean;
        "show_follow": boolean;
        "show_genres": boolean;
        "show_languages": boolean;
        "show_member_since": boolean;
        "show_send_message": boolean;
        "show_stats": boolean;
        "stories_count": number;
        "twitter_url": any;
        "views_count": number;
        "website": any;
        "writers_count": number;
    }
    interface UrRadioButton {
        "checked": boolean;
        "disabled": boolean;
        "name": string;
        "value": string;
    }
    interface UrRadioGroup {
        /**
          * Group name for the radio buttons
         */
        "name": string;
        /**
          * Whether the group is required
         */
        "required": boolean;
        /**
          * Reset the radio group
         */
        "reset": () => Promise<void>;
        /**
          * Validate the radio group
         */
        "validate": () => Promise<boolean>;
        /**
          * The currently selected value
         */
        "value": string | null;
    }
    interface UrReadDesktopTopAppBar {
        /**
          * Title of the novel
         */
        "novelTitle": string;
        /**
          * Behavior of the top app bar on scroll
         */
        "scrollBehavior": 'hide' | 'shrink' | 'elevate';
        /**
          * Scroll threshold in pixels (default: 50)
         */
        "scrollThreshold": number;
        /**
          * Variant of the top app bar (e.g., 'small', 'medium', etc.)
         */
        "variant": 'small' | 'medium' | 'large';
    }
    interface UrReadMobileTopAppBar {
        "headerTitle": string;
        "scrollBehavior": 'hide' | 'shrink' | 'elevate';
        "scrollThreshold": number;
        "variant": string;
    }
    interface UrReadRail {
        "avatarName": string;
        "avatarSrc": string;
        "comments": number;
        "dislike": string;
        "donate": string;
        "isAuthorFollowed": boolean;
        "isAuthorPro": boolean;
        "isChapterPurchased": boolean;
        "isDonationsEnabled": boolean;
        "isFollowed": boolean;
        "isHostSmall": boolean;
        "isNovlDeleted": boolean;
        "isOwnChapter": boolean;
        "isPaidChapter": boolean;
        "isVisible": boolean;
        "likes": number;
        "mode": 'desktop' | 'ionic';
        "share": string;
    }
    interface UrReadRailMobile {
        "avatarName": string;
        "avatarSrc": string;
        "comments": number;
        "dislike": string;
        "donate": string;
        "isAuthorFollowed": boolean;
        "isAuthorPro": boolean;
        "isChapterPurchased": boolean;
        "isDonationsEnabled": boolean;
        "isFollowed": boolean;
        "isNovlDeleted": boolean;
        "isOwnChapter": boolean;
        "isVisible": boolean;
        "likes": string;
        "share": string;
    }
    interface UrReader {
        "avatarName": string;
        "avatarSrc": string;
        "chapterContent": string;
        "chapterLocked": boolean;
        "chapterSequence": number;
        "chapterTitle": string;
        "comments": number;
        "dislike": string;
        "donate": string;
        "fontSize": 'small' | 'medium' | 'large';
        "fontType": 'serif' | 'sans-serif' | 'monospace' | 'system';
        "hasNextChapter": boolean;
        "hasPreviousChapter": boolean;
        "isAuthorFollowed": boolean;
        "isAuthorPro": boolean;
        "isChapterPurchased": boolean;
        "isDonationsEnabled": boolean;
        "isNovlDeleted": boolean;
        "isOwnChapter": boolean;
        "isVisible": boolean;
        "likes": string;
        "loading": boolean;
        "lockedMessage": string;
        "minutesText": string;
        "nextChapterText": string;
        "previousChapterText": string;
        "readingDurationText": string;
        "readingTimePerWord": number;
        "share": string;
        "storyTitle": string;
        "unlockButtonLabel": string;
    }
    interface UrSegmentButton {
        "likeLabel": string;
    }
    interface UrSelect {
        "clearIcon": string;
        "clearable": boolean;
        "disabled": boolean;
        "endIcon": string;
        "flex": boolean;
        "helper": string;
        "icon": string;
        "label": string;
        "multiple": boolean;
        "name": string;
        "placeholder": string;
        "placement": 'bottom' | 'top';
        "readonly": boolean;
        "required": boolean;
        "size": 'normal' | 'big' | 'small';
        "suffix": string;
        "usage": 'topBar' | 'standard';
        "value": string | string[];
        "variant": 'filled' | 'outlined';
    }
    interface UrSwitch {
        "checked": boolean;
        "disabled": boolean;
    }
    interface UrTabs {
        "panels": { content: string, value: string }[];
        "tabs": { label: string, value: string }[];
    }
    interface UrTextField {
        "autosize": boolean;
        "counter": boolean;
        "disabled": boolean;
        "endIcon": string | null;
        "error": boolean;
        "errorMessage": string | null;
        "helper": string | null;
        "label": string;
        "max": number | string | null;
        "maxRows": number | null;
        "maxlength": number | null;
        "min": number | string | null;
        "minRows": number | null;
        "minlength": number | null;
        "name": string;
        "pattern": string | null;
        "placeholder": string | null;
        "required": boolean;
        "rows": number | null;
        "step": number | string | null;
        "type": string;
        "value": string;
        "variant": 'filled' | 'outlined';
    }
    interface UrTooltip {
        "closeDelay": number;
        "colorScheme": 'dark' | 'light';
        "content": string;
        "disabled": boolean;
        "openDelay": number;
        "placement": | 'auto'
        | 'top-left'
        | 'top-start'
        | 'top'
        | 'top-end'
        | 'top-right'
        | 'bottom-left'
        | 'bottom-start'
        | 'bottom'
        | 'bottom-end'
        | 'bottom-right'
        | 'left-start'
        | 'left'
        | 'left-end'
        | 'right-start'
        | 'right'
        | 'right-end';
        "trigger": 'hover' | 'click' | 'focus';
        "variant": 'plain' | 'rich';
    }
    interface UrTopAppBar {
        "headerTitle": string;
        "logoOpacity": number;
        "logoRotation": number;
        "scrollBehavior": 'hide' | 'shrink' | 'elevate';
        "scrollThreshold": number;
        "variant": string;
    }
    interface UrUser {
        "followers": number;
        "showStats": boolean;
        "userCover": any;
        "userCoverFallback": string;
        "userDescription": any;
        "userTitle": string;
    }
    interface UrUserProfile {
    }
}
export interface UrButtonArrowLeftCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrButtonArrowLeftElement;
}
export interface UrButtonArrowRightCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrButtonArrowRightElement;
}
export interface UrCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrCheckboxElement;
}
export interface UrCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrCheckboxGroupElement;
}
export interface UrHeroCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrHeroElement;
}
export interface UrLocaleFilterPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrLocaleFilterPanelElement;
}
export interface UrMainDesktopTopAppBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrMainDesktopTopAppBarElement;
}
export interface UrMainLeftMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrMainLeftMenuElement;
}
export interface UrMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrMenuItemElement;
}
export interface UrNovlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrNovlElement;
}
export interface UrNovlCarouselCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrNovlCarouselElement;
}
export interface UrPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrPageElement;
}
export interface UrPageProfileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrPageProfileElement;
}
export interface UrRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrRadioButtonElement;
}
export interface UrRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrRadioGroupElement;
}
export interface UrReadDesktopTopAppBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrReadDesktopTopAppBarElement;
}
export interface UrReadMobileTopAppBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrReadMobileTopAppBarElement;
}
export interface UrReadRailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrReadRailElement;
}
export interface UrReadRailMobileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrReadRailMobileElement;
}
export interface UrReaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrReaderElement;
}
export interface UrSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrSelectElement;
}
export interface UrTextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrTextFieldElement;
}
export interface UrUserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrUserElement;
}
declare global {
    interface HTMLUrAvatarElement extends Components.UrAvatar, HTMLStencilElement {
    }
    var HTMLUrAvatarElement: {
        prototype: HTMLUrAvatarElement;
        new (): HTMLUrAvatarElement;
    };
    interface HTMLUrButtonElement extends Components.UrButton, HTMLStencilElement {
    }
    var HTMLUrButtonElement: {
        prototype: HTMLUrButtonElement;
        new (): HTMLUrButtonElement;
    };
    interface HTMLUrButtonArrowLeftElementEventMap {
        "leftClicked": any;
    }
    interface HTMLUrButtonArrowLeftElement extends Components.UrButtonArrowLeft, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrButtonArrowLeftElementEventMap>(type: K, listener: (this: HTMLUrButtonArrowLeftElement, ev: UrButtonArrowLeftCustomEvent<HTMLUrButtonArrowLeftElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrButtonArrowLeftElementEventMap>(type: K, listener: (this: HTMLUrButtonArrowLeftElement, ev: UrButtonArrowLeftCustomEvent<HTMLUrButtonArrowLeftElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrButtonArrowLeftElement: {
        prototype: HTMLUrButtonArrowLeftElement;
        new (): HTMLUrButtonArrowLeftElement;
    };
    interface HTMLUrButtonArrowRightElementEventMap {
        "rightClicked": any;
    }
    interface HTMLUrButtonArrowRightElement extends Components.UrButtonArrowRight, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrButtonArrowRightElementEventMap>(type: K, listener: (this: HTMLUrButtonArrowRightElement, ev: UrButtonArrowRightCustomEvent<HTMLUrButtonArrowRightElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrButtonArrowRightElementEventMap>(type: K, listener: (this: HTMLUrButtonArrowRightElement, ev: UrButtonArrowRightCustomEvent<HTMLUrButtonArrowRightElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrButtonArrowRightElement: {
        prototype: HTMLUrButtonArrowRightElement;
        new (): HTMLUrButtonArrowRightElement;
    };
    interface HTMLUrButtonIconElement extends Components.UrButtonIcon, HTMLStencilElement {
    }
    var HTMLUrButtonIconElement: {
        prototype: HTMLUrButtonIconElement;
        new (): HTMLUrButtonIconElement;
    };
    interface HTMLUrCheckboxElementEventMap {
        "valueChanged": { name: string; value: string; checked: boolean };
    }
    interface HTMLUrCheckboxElement extends Components.UrCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrCheckboxElementEventMap>(type: K, listener: (this: HTMLUrCheckboxElement, ev: UrCheckboxCustomEvent<HTMLUrCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrCheckboxElementEventMap>(type: K, listener: (this: HTMLUrCheckboxElement, ev: UrCheckboxCustomEvent<HTMLUrCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrCheckboxElement: {
        prototype: HTMLUrCheckboxElement;
        new (): HTMLUrCheckboxElement;
    };
    interface HTMLUrCheckboxGroupElementEventMap {
        "valueChanged": { name: string; values: string[] };
        "errorStateChanged": { name: string; error: boolean; message?: string };
    }
    interface HTMLUrCheckboxGroupElement extends Components.UrCheckboxGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLUrCheckboxGroupElement, ev: UrCheckboxGroupCustomEvent<HTMLUrCheckboxGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLUrCheckboxGroupElement, ev: UrCheckboxGroupCustomEvent<HTMLUrCheckboxGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrCheckboxGroupElement: {
        prototype: HTMLUrCheckboxGroupElement;
        new (): HTMLUrCheckboxGroupElement;
    };
    interface HTMLUrChipElement extends Components.UrChip, HTMLStencilElement {
    }
    var HTMLUrChipElement: {
        prototype: HTMLUrChipElement;
        new (): HTMLUrChipElement;
    };
    interface HTMLUrDialogElement extends Components.UrDialog, HTMLStencilElement {
    }
    var HTMLUrDialogElement: {
        prototype: HTMLUrDialogElement;
        new (): HTMLUrDialogElement;
    };
    interface HTMLUrHeroElementEventMap {
        "ctaClicked": void;
    }
    interface HTMLUrHeroElement extends Components.UrHero, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrHeroElementEventMap>(type: K, listener: (this: HTMLUrHeroElement, ev: UrHeroCustomEvent<HTMLUrHeroElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrHeroElementEventMap>(type: K, listener: (this: HTMLUrHeroElement, ev: UrHeroCustomEvent<HTMLUrHeroElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrHeroElement: {
        prototype: HTMLUrHeroElement;
        new (): HTMLUrHeroElement;
    };
    interface HTMLUrLinearProgressElement extends Components.UrLinearProgress, HTMLStencilElement {
    }
    var HTMLUrLinearProgressElement: {
        prototype: HTMLUrLinearProgressElement;
        new (): HTMLUrLinearProgressElement;
    };
    interface HTMLUrListElement extends Components.UrList, HTMLStencilElement {
    }
    var HTMLUrListElement: {
        prototype: HTMLUrListElement;
        new (): HTMLUrListElement;
    };
    interface HTMLUrListItemElement extends Components.UrListItem, HTMLStencilElement {
    }
    var HTMLUrListItemElement: {
        prototype: HTMLUrListItemElement;
        new (): HTMLUrListItemElement;
    };
    interface HTMLUrListSubheaderElement extends Components.UrListSubheader, HTMLStencilElement {
    }
    var HTMLUrListSubheaderElement: {
        prototype: HTMLUrListSubheaderElement;
        new (): HTMLUrListSubheaderElement;
    };
    interface HTMLUrLoaderElement extends Components.UrLoader, HTMLStencilElement {
    }
    var HTMLUrLoaderElement: {
        prototype: HTMLUrLoaderElement;
        new (): HTMLUrLoaderElement;
    };
    interface HTMLUrLocaleFilterButtonElement extends Components.UrLocaleFilterButton, HTMLStencilElement {
    }
    var HTMLUrLocaleFilterButtonElement: {
        prototype: HTMLUrLocaleFilterButtonElement;
        new (): HTMLUrLocaleFilterButtonElement;
    };
    interface HTMLUrLocaleFilterPanelElementEventMap {
        "save": Array<Locale>;
        "cancel": void;
    }
    interface HTMLUrLocaleFilterPanelElement extends Components.UrLocaleFilterPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrLocaleFilterPanelElementEventMap>(type: K, listener: (this: HTMLUrLocaleFilterPanelElement, ev: UrLocaleFilterPanelCustomEvent<HTMLUrLocaleFilterPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrLocaleFilterPanelElementEventMap>(type: K, listener: (this: HTMLUrLocaleFilterPanelElement, ev: UrLocaleFilterPanelCustomEvent<HTMLUrLocaleFilterPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrLocaleFilterPanelElement: {
        prototype: HTMLUrLocaleFilterPanelElement;
        new (): HTMLUrLocaleFilterPanelElement;
    };
    interface HTMLUrLogoElement extends Components.UrLogo, HTMLStencilElement {
    }
    var HTMLUrLogoElement: {
        prototype: HTMLUrLogoElement;
        new (): HTMLUrLogoElement;
    };
    interface HTMLUrMainDesktopTopAppBarElementEventMap {
        "searchLinkClicked": void;
    }
    interface HTMLUrMainDesktopTopAppBarElement extends Components.UrMainDesktopTopAppBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrMainDesktopTopAppBarElementEventMap>(type: K, listener: (this: HTMLUrMainDesktopTopAppBarElement, ev: UrMainDesktopTopAppBarCustomEvent<HTMLUrMainDesktopTopAppBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrMainDesktopTopAppBarElementEventMap>(type: K, listener: (this: HTMLUrMainDesktopTopAppBarElement, ev: UrMainDesktopTopAppBarCustomEvent<HTMLUrMainDesktopTopAppBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrMainDesktopTopAppBarElement: {
        prototype: HTMLUrMainDesktopTopAppBarElement;
        new (): HTMLUrMainDesktopTopAppBarElement;
    };
    interface HTMLUrMainLeftMenuElementEventMap {
        "toggleExpand": boolean;
    }
    interface HTMLUrMainLeftMenuElement extends Components.UrMainLeftMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrMainLeftMenuElementEventMap>(type: K, listener: (this: HTMLUrMainLeftMenuElement, ev: UrMainLeftMenuCustomEvent<HTMLUrMainLeftMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrMainLeftMenuElementEventMap>(type: K, listener: (this: HTMLUrMainLeftMenuElement, ev: UrMainLeftMenuCustomEvent<HTMLUrMainLeftMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrMainLeftMenuElement: {
        prototype: HTMLUrMainLeftMenuElement;
        new (): HTMLUrMainLeftMenuElement;
    };
    interface HTMLUrMenuItemElementEventMap {
        "itemClicked": string;
    }
    interface HTMLUrMenuItemElement extends Components.UrMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrMenuItemElementEventMap>(type: K, listener: (this: HTMLUrMenuItemElement, ev: UrMenuItemCustomEvent<HTMLUrMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrMenuItemElementEventMap>(type: K, listener: (this: HTMLUrMenuItemElement, ev: UrMenuItemCustomEvent<HTMLUrMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrMenuItemElement: {
        prototype: HTMLUrMenuItemElement;
        new (): HTMLUrMenuItemElement;
    };
    interface HTMLUrMenuProfileElement extends Components.UrMenuProfile, HTMLStencilElement {
    }
    var HTMLUrMenuProfileElement: {
        prototype: HTMLUrMenuProfileElement;
        new (): HTMLUrMenuProfileElement;
    };
    interface HTMLUrNavigationDrawerElement extends Components.UrNavigationDrawer, HTMLStencilElement {
    }
    var HTMLUrNavigationDrawerElement: {
        prototype: HTMLUrNavigationDrawerElement;
        new (): HTMLUrNavigationDrawerElement;
    };
    interface HTMLUrNovlElementEventMap {
        "novlClicked": string;
    }
    interface HTMLUrNovlElement extends Components.UrNovl, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrNovlElementEventMap>(type: K, listener: (this: HTMLUrNovlElement, ev: UrNovlCustomEvent<HTMLUrNovlElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrNovlElementEventMap>(type: K, listener: (this: HTMLUrNovlElement, ev: UrNovlCustomEvent<HTMLUrNovlElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrNovlElement: {
        prototype: HTMLUrNovlElement;
        new (): HTMLUrNovlElement;
    };
    interface HTMLUrNovlCarouselElementEventMap {
        "prevClicked": void;
        "nextClicked": void;
        "progressUpdated": [ number, number ];
    }
    interface HTMLUrNovlCarouselElement extends Components.UrNovlCarousel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrNovlCarouselElementEventMap>(type: K, listener: (this: HTMLUrNovlCarouselElement, ev: UrNovlCarouselCustomEvent<HTMLUrNovlCarouselElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrNovlCarouselElementEventMap>(type: K, listener: (this: HTMLUrNovlCarouselElement, ev: UrNovlCarouselCustomEvent<HTMLUrNovlCarouselElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrNovlCarouselElement: {
        prototype: HTMLUrNovlCarouselElement;
        new (): HTMLUrNovlCarouselElement;
    };
    interface HTMLUrPageElementEventMap {
        "pageFollowClicked": any;
    }
    interface HTMLUrPageElement extends Components.UrPage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrPageElementEventMap>(type: K, listener: (this: HTMLUrPageElement, ev: UrPageCustomEvent<HTMLUrPageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrPageElementEventMap>(type: K, listener: (this: HTMLUrPageElement, ev: UrPageCustomEvent<HTMLUrPageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrPageElement: {
        prototype: HTMLUrPageElement;
        new (): HTMLUrPageElement;
    };
    interface HTMLUrPageProfileElementEventMap {
        "follow": any;
        "member": any;
        "donate": any;
        "sendMessage": any;
    }
    interface HTMLUrPageProfileElement extends Components.UrPageProfile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrPageProfileElementEventMap>(type: K, listener: (this: HTMLUrPageProfileElement, ev: UrPageProfileCustomEvent<HTMLUrPageProfileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrPageProfileElementEventMap>(type: K, listener: (this: HTMLUrPageProfileElement, ev: UrPageProfileCustomEvent<HTMLUrPageProfileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrPageProfileElement: {
        prototype: HTMLUrPageProfileElement;
        new (): HTMLUrPageProfileElement;
    };
    interface HTMLUrProfileElement extends Components.UrProfile, HTMLStencilElement {
    }
    var HTMLUrProfileElement: {
        prototype: HTMLUrProfileElement;
        new (): HTMLUrProfileElement;
    };
    interface HTMLUrRadioButtonElementEventMap {
        "valueSelected": { value: string };
    }
    interface HTMLUrRadioButtonElement extends Components.UrRadioButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrRadioButtonElementEventMap>(type: K, listener: (this: HTMLUrRadioButtonElement, ev: UrRadioButtonCustomEvent<HTMLUrRadioButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrRadioButtonElementEventMap>(type: K, listener: (this: HTMLUrRadioButtonElement, ev: UrRadioButtonCustomEvent<HTMLUrRadioButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrRadioButtonElement: {
        prototype: HTMLUrRadioButtonElement;
        new (): HTMLUrRadioButtonElement;
    };
    interface HTMLUrRadioGroupElementEventMap {
        "valueChanged": { name: string; value: string };
        "errorStateChanged": { name: string; error: boolean; message?: string };
    }
    interface HTMLUrRadioGroupElement extends Components.UrRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrRadioGroupElementEventMap>(type: K, listener: (this: HTMLUrRadioGroupElement, ev: UrRadioGroupCustomEvent<HTMLUrRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrRadioGroupElementEventMap>(type: K, listener: (this: HTMLUrRadioGroupElement, ev: UrRadioGroupCustomEvent<HTMLUrRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrRadioGroupElement: {
        prototype: HTMLUrRadioGroupElement;
        new (): HTMLUrRadioGroupElement;
    };
    interface HTMLUrReadDesktopTopAppBarElementEventMap {
        "readingSettingsClick": void;
    }
    interface HTMLUrReadDesktopTopAppBarElement extends Components.UrReadDesktopTopAppBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrReadDesktopTopAppBarElementEventMap>(type: K, listener: (this: HTMLUrReadDesktopTopAppBarElement, ev: UrReadDesktopTopAppBarCustomEvent<HTMLUrReadDesktopTopAppBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrReadDesktopTopAppBarElementEventMap>(type: K, listener: (this: HTMLUrReadDesktopTopAppBarElement, ev: UrReadDesktopTopAppBarCustomEvent<HTMLUrReadDesktopTopAppBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrReadDesktopTopAppBarElement: {
        prototype: HTMLUrReadDesktopTopAppBarElement;
        new (): HTMLUrReadDesktopTopAppBarElement;
    };
    interface HTMLUrReadMobileTopAppBarElementEventMap {
        "backClick": void;
        "chaptersClick": void;
        "readingSettingsClick": void;
    }
    interface HTMLUrReadMobileTopAppBarElement extends Components.UrReadMobileTopAppBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrReadMobileTopAppBarElementEventMap>(type: K, listener: (this: HTMLUrReadMobileTopAppBarElement, ev: UrReadMobileTopAppBarCustomEvent<HTMLUrReadMobileTopAppBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrReadMobileTopAppBarElementEventMap>(type: K, listener: (this: HTMLUrReadMobileTopAppBarElement, ev: UrReadMobileTopAppBarCustomEvent<HTMLUrReadMobileTopAppBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrReadMobileTopAppBarElement: {
        prototype: HTMLUrReadMobileTopAppBarElement;
        new (): HTMLUrReadMobileTopAppBarElement;
    };
    interface HTMLUrReadRailElementEventMap {
        "likeClicked": boolean;
        "dislikeClicked": boolean;
        "commentClicked": void;
        "donateClicked": void;
        "shareClicked": void;
        "followClicked": void;
        "viewProfileClicked": void;
        "visibilityToggled": boolean;
        "facebookShareClicked": void;
        "twitterShareClicked": void;
        "linkedinShareClicked": void;
        "nativeShareClicked": void;
    }
    interface HTMLUrReadRailElement extends Components.UrReadRail, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrReadRailElementEventMap>(type: K, listener: (this: HTMLUrReadRailElement, ev: UrReadRailCustomEvent<HTMLUrReadRailElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrReadRailElementEventMap>(type: K, listener: (this: HTMLUrReadRailElement, ev: UrReadRailCustomEvent<HTMLUrReadRailElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrReadRailElement: {
        prototype: HTMLUrReadRailElement;
        new (): HTMLUrReadRailElement;
    };
    interface HTMLUrReadRailMobileElementEventMap {
        "likeClicked": void;
        "dislikeClicked": void;
        "commentClicked": void;
        "donateClicked": void;
        "shareClicked": void;
        "followClicked": void;
        "viewProfileClicked": void;
        "visibilityToggled": boolean;
    }
    interface HTMLUrReadRailMobileElement extends Components.UrReadRailMobile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrReadRailMobileElementEventMap>(type: K, listener: (this: HTMLUrReadRailMobileElement, ev: UrReadRailMobileCustomEvent<HTMLUrReadRailMobileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrReadRailMobileElementEventMap>(type: K, listener: (this: HTMLUrReadRailMobileElement, ev: UrReadRailMobileCustomEvent<HTMLUrReadRailMobileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrReadRailMobileElement: {
        prototype: HTMLUrReadRailMobileElement;
        new (): HTMLUrReadRailMobileElement;
    };
    interface HTMLUrReaderElementEventMap {
        "chapterUnlocked": void;
        "likeClicked": void;
        "dislikeClicked": void;
        "commentClicked": void;
        "donateClicked": void;
        "shareClicked": void;
        "nextChapterClicked": void;
        "previousChapterClicked": void;
        "followAuthorClicked": void;
        "viewAuthorProfileClicked": void;
    }
    interface HTMLUrReaderElement extends Components.UrReader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrReaderElementEventMap>(type: K, listener: (this: HTMLUrReaderElement, ev: UrReaderCustomEvent<HTMLUrReaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrReaderElementEventMap>(type: K, listener: (this: HTMLUrReaderElement, ev: UrReaderCustomEvent<HTMLUrReaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrReaderElement: {
        prototype: HTMLUrReaderElement;
        new (): HTMLUrReaderElement;
    };
    interface HTMLUrSegmentButtonElement extends Components.UrSegmentButton, HTMLStencilElement {
    }
    var HTMLUrSegmentButtonElement: {
        prototype: HTMLUrSegmentButtonElement;
        new (): HTMLUrSegmentButtonElement;
    };
    interface HTMLUrSelectElementEventMap {
        "valueChanged": { value: string | string[] };
    }
    interface HTMLUrSelectElement extends Components.UrSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrSelectElementEventMap>(type: K, listener: (this: HTMLUrSelectElement, ev: UrSelectCustomEvent<HTMLUrSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrSelectElementEventMap>(type: K, listener: (this: HTMLUrSelectElement, ev: UrSelectCustomEvent<HTMLUrSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrSelectElement: {
        prototype: HTMLUrSelectElement;
        new (): HTMLUrSelectElement;
    };
    interface HTMLUrSwitchElement extends Components.UrSwitch, HTMLStencilElement {
    }
    var HTMLUrSwitchElement: {
        prototype: HTMLUrSwitchElement;
        new (): HTMLUrSwitchElement;
    };
    interface HTMLUrTabsElement extends Components.UrTabs, HTMLStencilElement {
    }
    var HTMLUrTabsElement: {
        prototype: HTMLUrTabsElement;
        new (): HTMLUrTabsElement;
    };
    interface HTMLUrTextFieldElementEventMap {
        "valueChanged": { name: string; value: string };
        "errorStateChanged": { name: string; error: boolean; message?: string };
    }
    interface HTMLUrTextFieldElement extends Components.UrTextField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrTextFieldElementEventMap>(type: K, listener: (this: HTMLUrTextFieldElement, ev: UrTextFieldCustomEvent<HTMLUrTextFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrTextFieldElementEventMap>(type: K, listener: (this: HTMLUrTextFieldElement, ev: UrTextFieldCustomEvent<HTMLUrTextFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrTextFieldElement: {
        prototype: HTMLUrTextFieldElement;
        new (): HTMLUrTextFieldElement;
    };
    interface HTMLUrTooltipElement extends Components.UrTooltip, HTMLStencilElement {
    }
    var HTMLUrTooltipElement: {
        prototype: HTMLUrTooltipElement;
        new (): HTMLUrTooltipElement;
    };
    interface HTMLUrTopAppBarElement extends Components.UrTopAppBar, HTMLStencilElement {
    }
    var HTMLUrTopAppBarElement: {
        prototype: HTMLUrTopAppBarElement;
        new (): HTMLUrTopAppBarElement;
    };
    interface HTMLUrUserElementEventMap {
        "userFollowClicked": any;
    }
    interface HTMLUrUserElement extends Components.UrUser, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUrUserElementEventMap>(type: K, listener: (this: HTMLUrUserElement, ev: UrUserCustomEvent<HTMLUrUserElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUrUserElementEventMap>(type: K, listener: (this: HTMLUrUserElement, ev: UrUserCustomEvent<HTMLUrUserElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUrUserElement: {
        prototype: HTMLUrUserElement;
        new (): HTMLUrUserElement;
    };
    interface HTMLUrUserProfileElement extends Components.UrUserProfile, HTMLStencilElement {
    }
    var HTMLUrUserProfileElement: {
        prototype: HTMLUrUserProfileElement;
        new (): HTMLUrUserProfileElement;
    };
    interface HTMLElementTagNameMap {
        "ur-avatar": HTMLUrAvatarElement;
        "ur-button": HTMLUrButtonElement;
        "ur-button-arrow-left": HTMLUrButtonArrowLeftElement;
        "ur-button-arrow-right": HTMLUrButtonArrowRightElement;
        "ur-button-icon": HTMLUrButtonIconElement;
        "ur-checkbox": HTMLUrCheckboxElement;
        "ur-checkbox-group": HTMLUrCheckboxGroupElement;
        "ur-chip": HTMLUrChipElement;
        "ur-dialog": HTMLUrDialogElement;
        "ur-hero": HTMLUrHeroElement;
        "ur-linear-progress": HTMLUrLinearProgressElement;
        "ur-list": HTMLUrListElement;
        "ur-list-item": HTMLUrListItemElement;
        "ur-list-subheader": HTMLUrListSubheaderElement;
        "ur-loader": HTMLUrLoaderElement;
        "ur-locale-filter-button": HTMLUrLocaleFilterButtonElement;
        "ur-locale-filter-panel": HTMLUrLocaleFilterPanelElement;
        "ur-logo": HTMLUrLogoElement;
        "ur-main-desktop-top-app-bar": HTMLUrMainDesktopTopAppBarElement;
        "ur-main-left-menu": HTMLUrMainLeftMenuElement;
        "ur-menu-item": HTMLUrMenuItemElement;
        "ur-menu-profile": HTMLUrMenuProfileElement;
        "ur-navigation-drawer": HTMLUrNavigationDrawerElement;
        "ur-novl": HTMLUrNovlElement;
        "ur-novl-carousel": HTMLUrNovlCarouselElement;
        "ur-page": HTMLUrPageElement;
        "ur-page-profile": HTMLUrPageProfileElement;
        "ur-profile": HTMLUrProfileElement;
        "ur-radio-button": HTMLUrRadioButtonElement;
        "ur-radio-group": HTMLUrRadioGroupElement;
        "ur-read-desktop-top-app-bar": HTMLUrReadDesktopTopAppBarElement;
        "ur-read-mobile-top-app-bar": HTMLUrReadMobileTopAppBarElement;
        "ur-read-rail": HTMLUrReadRailElement;
        "ur-read-rail-mobile": HTMLUrReadRailMobileElement;
        "ur-reader": HTMLUrReaderElement;
        "ur-segment-button": HTMLUrSegmentButtonElement;
        "ur-select": HTMLUrSelectElement;
        "ur-switch": HTMLUrSwitchElement;
        "ur-tabs": HTMLUrTabsElement;
        "ur-text-field": HTMLUrTextFieldElement;
        "ur-tooltip": HTMLUrTooltipElement;
        "ur-top-app-bar": HTMLUrTopAppBarElement;
        "ur-user": HTMLUrUserElement;
        "ur-user-profile": HTMLUrUserProfileElement;
    }
}
declare namespace LocalJSX {
    interface UrAvatar {
        "border"?: string;
        "name"?: string;
        "radius"?: string;
        "size"?: string;
        "src"?: string;
    }
    interface UrButton {
        "disabled"?: boolean;
        "endIcon"?: any;
        "fullWidth"?: boolean;
        "icon"?: any;
        "variant"?: 'elevated' | 'filled' | 'tonal' | 'outlined' | 'text';
    }
    interface UrButtonArrowLeft {
        "disabled"?: boolean;
        "onLeftClicked"?: (event: UrButtonArrowLeftCustomEvent<any>) => void;
    }
    interface UrButtonArrowRight {
        "disabled"?: boolean;
        "onRightClicked"?: (event: UrButtonArrowRightCustomEvent<any>) => void;
    }
    interface UrButtonIcon {
        "disabled"?: boolean;
        "icon"?: string;
        "loading"?: boolean;
        "selected"?: boolean;
        "selectedIcon"?: string;
        "variant"?: 'standard' | 'filled' | 'tonal' | 'outlined';
    }
    interface UrCheckbox {
        /**
          * Indicates if the checkbox is checked
         */
        "checked"?: boolean;
        /**
          * Indicates if the checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * The name of the checkbox group
         */
        "name"?: string;
        /**
          * Event emitted when the checkbox value changes
         */
        "onValueChanged"?: (event: UrCheckboxCustomEvent<{ name: string; value: string; checked: boolean }>) => void;
        /**
          * The value of the checkbox
         */
        "value"?: string;
    }
    interface UrCheckboxGroup {
        /**
          * Maximum number of selectable options
         */
        "maxSelectable"?: number | null;
        /**
          * The name of the checkbox group
         */
        "name"?: string;
        /**
          * Event emitted when validation state changes
         */
        "onErrorStateChanged"?: (event: UrCheckboxGroupCustomEvent<{ name: string; error: boolean; message?: string }>) => void;
        /**
          * Event emitted when the values change
         */
        "onValueChanged"?: (event: UrCheckboxGroupCustomEvent<{ name: string; values: string[] }>) => void;
        /**
          * Whether the group is required
         */
        "required"?: boolean;
        /**
          * Enable a "Select All" checkbox
         */
        "selectAll"?: boolean;
        /**
          * Text for the "Select All" checkbox
         */
        "selectAllText"?: string;
        /**
          * Currently selected values
         */
        "values"?: string[];
    }
    interface UrChip {
        "backColor"?: string;
        "border"?: string;
        "disabled"?: boolean;
        "fontColor"?: string;
        "label"?: string;
        "loading"?: boolean;
        "radius"?: string;
        "size"?: string;
    }
    interface UrDialog {
        "borderRadius"?: string | null;
        "closeOnEsc"?: boolean;
        "closeOnOverlayClick"?: boolean;
        "description"?: string | null;
        "fullscreen"?: boolean;
        "open"?: boolean;
    }
    interface UrHero {
        "backgroundAlignment"?: 'left' | 'center' | 'right';
        "backgroundColor"?: string;
        "backgroundImage"?: string;
        "backgroundJustification"?: 'top' | 'center' | 'bottom';
        "ctaText"?: string;
        "heroSubtitle"?: string;
        "heroSubtitleColor"?: string;
        "heroTitle"?: string;
        "heroTitleColor"?: string;
        "layout"?: 'left' | 'right' | 'center';
        "onCtaClicked"?: (event: UrHeroCustomEvent<void>) => void;
    }
    interface UrLinearProgress {
        /**
          * The maximum value of the progress indicator.
         */
        "max"?: number;
        /**
          * The current value of the progress indicator. If null or undefined, the progress is indeterminate.
         */
        "value"?: number | null;
    }
    interface UrList {
    }
    interface UrListItem {
        "active"?: boolean;
        "alignment"?: 'start' | 'center' | 'end';
        "content"?: string;
        "description"?: string;
        "disabled"?: boolean;
        "endIcon"?: string;
        "href"?: string;
        "icon"?: string;
        "nonclickable"?: boolean;
        "rel"?: string;
        "rounded"?: boolean;
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface UrListSubheader {
        "text"?: string;
    }
    interface UrLoader {
    }
    interface UrLocaleFilterButton {
        "count"?: number;
        "selected"?: boolean;
    }
    interface UrLocaleFilterPanel {
        "disabledLocales"?: string[];
        /**
          * List of available languages
         */
        "locales"?: Array<Locale>;
        /**
          * Event emitted when canceling
         */
        "onCancel"?: (event: UrLocaleFilterPanelCustomEvent<void>) => void;
        /**
          * Event emitted when saving languages
         */
        "onSave"?: (event: UrLocaleFilterPanelCustomEvent<Array<Locale>>) => void;
        /**
          * Whether to show the footer
         */
        "showFooter"?: boolean;
        /**
          * Whether to show the header
         */
        "showHeader"?: boolean;
    }
    interface UrLogo {
        /**
          * Color of the logo
         */
        "color"?: string;
        /**
          * Height of the logo
         */
        "height"?: string;
        /**
          * Opacity of the logo
         */
        "opacity"?: number;
        /**
          * Rotation angle of the logo in degrees
         */
        "rotation"?: number;
        /**
          * Width of the logo
         */
        "width"?: string;
    }
    interface UrMainDesktopTopAppBar {
        "logoOpacity"?: number;
        "logoRotation"?: number;
        "onSearchLinkClicked"?: (event: UrMainDesktopTopAppBarCustomEvent<void>) => void;
        "searchText"?: string;
        "variant"?: string;
    }
    interface UrMainLeftMenu {
        "loggedIn"?: boolean;
        "onToggleExpand"?: (event: UrMainLeftMenuCustomEvent<boolean>) => void;
        "opened"?: boolean;
        "userAvatar"?: string;
        "userName"?: string;
        "userRole"?: string;
    }
    interface UrMenuItem {
        "disabled"?: boolean;
        "label"?: string;
        "onItemClicked"?: (event: UrMenuItemCustomEvent<string>) => void;
        "selected"?: boolean;
        "value"?: string;
    }
    interface UrMenuProfile {
        "userAvatar"?: string;
        "userName"?: string;
        "userRole"?: string;
    }
    interface UrNavigationDrawer {
        /**
          * Closes the drawer when the 'Esc' key is pressed
         */
        "closeOnEsc"?: boolean;
        /**
          * Closes the drawer when clicking outside of it
         */
        "closeOnOverlayClick"?: boolean;
        /**
          * Contains the drawer within its parent element
         */
        "contained"?: boolean;
        /**
          * Determines if the drawer is open
         */
        "open"?: boolean;
        /**
          * Placement of the drawer: 'left' or 'right'
         */
        "placement"?: 'left' | 'right';
    }
    interface UrNovl {
        "authorAvatar"?: any;
        "authorName"?: any;
        "borderRadius"?: string;
        "likes"?: number;
        "loading"?: boolean;
        "novlCover"?: any;
        "novlCoverFallback"?: string;
        "novlDescription"?: any;
        "novlId"?: any;
        "novlTitle"?: string;
        "onNovlClicked"?: (event: UrNovlCustomEvent<string>) => void;
        "price"?: string | null;
        "published"?: boolean;
        "publisherAvatar"?: string | null;
        "publisherName"?: string | null;
        "showStats"?: boolean;
        "views"?: number;
    }
    interface UrNovlCarousel {
        "breakpoints"?: Breakpoints;
        "destroyListeners"?: boolean;
        "grid"?: Grid;
        "loading"?: boolean;
        "navigation"?: boolean;
        "novls"?: Array<Novl | CustomContent>;
        "onNextClicked"?: (event: UrNovlCarouselCustomEvent<void>) => void;
        "onPrevClicked"?: (event: UrNovlCarouselCustomEvent<void>) => void;
        "onProgressUpdated"?: (event: UrNovlCarouselCustomEvent<[ number, number ]>) => void;
        "slidesPerView"?: number | 'auto';
        "spaceBetween"?: number | string;
    }
    interface UrPage {
        "followers"?: number;
        "onPageFollowClicked"?: (event: UrPageCustomEvent<any>) => void;
        "pageCover"?: any;
        "pageCoverFallback"?: string;
        "pageDescription"?: any;
        "pageTitle"?: string;
        "showStats"?: boolean;
    }
    interface UrPageProfile {
        "avatar"?: any;
        "description"?: any;
        "email"?: any;
        "facebook_url"?: any;
        "followers"?: number | null;
        "following"?: number | null;
        "genres"?: string | null;
        "languages"?: string | null;
        "linkedin_url"?: any;
        "literatureTypes"?: string | null;
        "location"?: any;
        "members"?: number | null;
        "name"?: any;
        "onDonate"?: (event: UrPageProfileCustomEvent<any>) => void;
        "onFollow"?: (event: UrPageProfileCustomEvent<any>) => void;
        "onMember"?: (event: UrPageProfileCustomEvent<any>) => void;
        "onSendMessage"?: (event: UrPageProfileCustomEvent<any>) => void;
        "pageCreationDate"?: any;
        "pageCreatorImage"?: any;
        "pageCreatorName"?: any;
        "phone"?: any;
        "showBecomeMember"?: boolean;
        "showDonate"?: boolean;
        "showFollow"?: boolean;
        "showSendMessage"?: boolean;
        "stories"?: number | null;
        "twitter_url"?: any;
        "views"?: number | null;
        "website"?: any;
    }
    interface UrProfile {
        "description"?: any;
        "email"?: any;
        "facebook_url"?: any;
        "followers_count"?: number;
        "genres"?: string;
        "languages"?: string;
        "linkedin_url"?: any;
        "location"?: any;
        "member_since"?: string;
        "name"?: any;
        "phone"?: any;
        "show_become_member"?: boolean;
        "show_donate"?: boolean;
        "show_follow"?: boolean;
        "show_genres"?: boolean;
        "show_languages"?: boolean;
        "show_member_since"?: boolean;
        "show_send_message"?: boolean;
        "show_stats"?: boolean;
        "stories_count"?: number;
        "twitter_url"?: any;
        "views_count"?: number;
        "website"?: any;
        "writers_count"?: number;
    }
    interface UrRadioButton {
        "checked"?: boolean;
        "disabled"?: boolean;
        "name"?: string;
        "onValueSelected"?: (event: UrRadioButtonCustomEvent<{ value: string }>) => void;
        "value"?: string;
    }
    interface UrRadioGroup {
        /**
          * Group name for the radio buttons
         */
        "name"?: string;
        /**
          * Event emitted when validation state changes
         */
        "onErrorStateChanged"?: (event: UrRadioGroupCustomEvent<{ name: string; error: boolean; message?: string }>) => void;
        /**
          * Event emitted when the value changes
         */
        "onValueChanged"?: (event: UrRadioGroupCustomEvent<{ name: string; value: string }>) => void;
        /**
          * Whether the group is required
         */
        "required"?: boolean;
        /**
          * The currently selected value
         */
        "value"?: string | null;
    }
    interface UrReadDesktopTopAppBar {
        /**
          * Title of the novel
         */
        "novelTitle"?: string;
        "onReadingSettingsClick"?: (event: UrReadDesktopTopAppBarCustomEvent<void>) => void;
        /**
          * Behavior of the top app bar on scroll
         */
        "scrollBehavior"?: 'hide' | 'shrink' | 'elevate';
        /**
          * Scroll threshold in pixels (default: 50)
         */
        "scrollThreshold"?: number;
        /**
          * Variant of the top app bar (e.g., 'small', 'medium', etc.)
         */
        "variant"?: 'small' | 'medium' | 'large';
    }
    interface UrReadMobileTopAppBar {
        "headerTitle"?: string;
        "onBackClick"?: (event: UrReadMobileTopAppBarCustomEvent<void>) => void;
        "onChaptersClick"?: (event: UrReadMobileTopAppBarCustomEvent<void>) => void;
        "onReadingSettingsClick"?: (event: UrReadMobileTopAppBarCustomEvent<void>) => void;
        "scrollBehavior"?: 'hide' | 'shrink' | 'elevate';
        "scrollThreshold"?: number;
        "variant"?: string;
    }
    interface UrReadRail {
        "avatarName"?: string;
        "avatarSrc"?: string;
        "comments"?: number;
        "dislike"?: string;
        "donate"?: string;
        "isAuthorFollowed"?: boolean;
        "isAuthorPro"?: boolean;
        "isChapterPurchased"?: boolean;
        "isDonationsEnabled"?: boolean;
        "isFollowed"?: boolean;
        "isHostSmall"?: boolean;
        "isNovlDeleted"?: boolean;
        "isOwnChapter"?: boolean;
        "isPaidChapter"?: boolean;
        "isVisible"?: boolean;
        "likes"?: number;
        "mode"?: 'desktop' | 'ionic';
        "onCommentClicked"?: (event: UrReadRailCustomEvent<void>) => void;
        "onDislikeClicked"?: (event: UrReadRailCustomEvent<boolean>) => void;
        "onDonateClicked"?: (event: UrReadRailCustomEvent<void>) => void;
        "onFacebookShareClicked"?: (event: UrReadRailCustomEvent<void>) => void;
        "onFollowClicked"?: (event: UrReadRailCustomEvent<void>) => void;
        "onLikeClicked"?: (event: UrReadRailCustomEvent<boolean>) => void;
        "onLinkedinShareClicked"?: (event: UrReadRailCustomEvent<void>) => void;
        "onNativeShareClicked"?: (event: UrReadRailCustomEvent<void>) => void;
        "onShareClicked"?: (event: UrReadRailCustomEvent<void>) => void;
        "onTwitterShareClicked"?: (event: UrReadRailCustomEvent<void>) => void;
        "onViewProfileClicked"?: (event: UrReadRailCustomEvent<void>) => void;
        "onVisibilityToggled"?: (event: UrReadRailCustomEvent<boolean>) => void;
        "share"?: string;
    }
    interface UrReadRailMobile {
        "avatarName"?: string;
        "avatarSrc"?: string;
        "comments"?: number;
        "dislike"?: string;
        "donate"?: string;
        "isAuthorFollowed"?: boolean;
        "isAuthorPro"?: boolean;
        "isChapterPurchased"?: boolean;
        "isDonationsEnabled"?: boolean;
        "isFollowed"?: boolean;
        "isNovlDeleted"?: boolean;
        "isOwnChapter"?: boolean;
        "isVisible"?: boolean;
        "likes"?: string;
        "onCommentClicked"?: (event: UrReadRailMobileCustomEvent<void>) => void;
        "onDislikeClicked"?: (event: UrReadRailMobileCustomEvent<void>) => void;
        "onDonateClicked"?: (event: UrReadRailMobileCustomEvent<void>) => void;
        "onFollowClicked"?: (event: UrReadRailMobileCustomEvent<void>) => void;
        "onLikeClicked"?: (event: UrReadRailMobileCustomEvent<void>) => void;
        "onShareClicked"?: (event: UrReadRailMobileCustomEvent<void>) => void;
        "onViewProfileClicked"?: (event: UrReadRailMobileCustomEvent<void>) => void;
        "onVisibilityToggled"?: (event: UrReadRailMobileCustomEvent<boolean>) => void;
        "share"?: string;
    }
    interface UrReader {
        "avatarName"?: string;
        "avatarSrc"?: string;
        "chapterContent"?: string;
        "chapterLocked"?: boolean;
        "chapterSequence"?: number;
        "chapterTitle"?: string;
        "comments"?: number;
        "dislike"?: string;
        "donate"?: string;
        "fontSize"?: 'small' | 'medium' | 'large';
        "fontType"?: 'serif' | 'sans-serif' | 'monospace' | 'system';
        "hasNextChapter"?: boolean;
        "hasPreviousChapter"?: boolean;
        "isAuthorFollowed"?: boolean;
        "isAuthorPro"?: boolean;
        "isChapterPurchased"?: boolean;
        "isDonationsEnabled"?: boolean;
        "isNovlDeleted"?: boolean;
        "isOwnChapter"?: boolean;
        "isVisible"?: boolean;
        "likes"?: string;
        "loading"?: boolean;
        "lockedMessage"?: string;
        "minutesText"?: string;
        "nextChapterText"?: string;
        "onChapterUnlocked"?: (event: UrReaderCustomEvent<void>) => void;
        "onCommentClicked"?: (event: UrReaderCustomEvent<void>) => void;
        "onDislikeClicked"?: (event: UrReaderCustomEvent<void>) => void;
        "onDonateClicked"?: (event: UrReaderCustomEvent<void>) => void;
        "onFollowAuthorClicked"?: (event: UrReaderCustomEvent<void>) => void;
        "onLikeClicked"?: (event: UrReaderCustomEvent<void>) => void;
        "onNextChapterClicked"?: (event: UrReaderCustomEvent<void>) => void;
        "onPreviousChapterClicked"?: (event: UrReaderCustomEvent<void>) => void;
        "onShareClicked"?: (event: UrReaderCustomEvent<void>) => void;
        "onViewAuthorProfileClicked"?: (event: UrReaderCustomEvent<void>) => void;
        "previousChapterText"?: string;
        "readingDurationText"?: string;
        "readingTimePerWord"?: number;
        "share"?: string;
        "storyTitle"?: string;
        "unlockButtonLabel"?: string;
    }
    interface UrSegmentButton {
        "likeLabel"?: string;
    }
    interface UrSelect {
        "clearIcon"?: string;
        "clearable"?: boolean;
        "disabled"?: boolean;
        "endIcon"?: string;
        "flex"?: boolean;
        "helper"?: string;
        "icon"?: string;
        "label"?: string;
        "multiple"?: boolean;
        "name"?: string;
        "onValueChanged"?: (event: UrSelectCustomEvent<{ value: string | string[] }>) => void;
        "placeholder"?: string;
        "placement"?: 'bottom' | 'top';
        "readonly"?: boolean;
        "required"?: boolean;
        "size"?: 'normal' | 'big' | 'small';
        "suffix"?: string;
        "usage"?: 'topBar' | 'standard';
        "value"?: string | string[];
        "variant"?: 'filled' | 'outlined';
    }
    interface UrSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
    }
    interface UrTabs {
        "panels"?: { content: string, value: string }[];
        "tabs"?: { label: string, value: string }[];
    }
    interface UrTextField {
        "autosize"?: boolean;
        "counter"?: boolean;
        "disabled"?: boolean;
        "endIcon"?: string | null;
        "error"?: boolean;
        "errorMessage"?: string | null;
        "helper"?: string | null;
        "label"?: string;
        "max"?: number | string | null;
        "maxRows"?: number | null;
        "maxlength"?: number | null;
        "min"?: number | string | null;
        "minRows"?: number | null;
        "minlength"?: number | null;
        "name"?: string;
        "onErrorStateChanged"?: (event: UrTextFieldCustomEvent<{ name: string; error: boolean; message?: string }>) => void;
        "onValueChanged"?: (event: UrTextFieldCustomEvent<{ name: string; value: string }>) => void;
        "pattern"?: string | null;
        "placeholder"?: string | null;
        "required"?: boolean;
        "rows"?: number | null;
        "step"?: number | string | null;
        "type"?: string;
        "value"?: string;
        "variant"?: 'filled' | 'outlined';
    }
    interface UrTooltip {
        "closeDelay"?: number;
        "colorScheme"?: 'dark' | 'light';
        "content"?: string;
        "disabled"?: boolean;
        "openDelay"?: number;
        "placement"?: | 'auto'
        | 'top-left'
        | 'top-start'
        | 'top'
        | 'top-end'
        | 'top-right'
        | 'bottom-left'
        | 'bottom-start'
        | 'bottom'
        | 'bottom-end'
        | 'bottom-right'
        | 'left-start'
        | 'left'
        | 'left-end'
        | 'right-start'
        | 'right'
        | 'right-end';
        "trigger"?: 'hover' | 'click' | 'focus';
        "variant"?: 'plain' | 'rich';
    }
    interface UrTopAppBar {
        "headerTitle"?: string;
        "logoOpacity"?: number;
        "logoRotation"?: number;
        "scrollBehavior"?: 'hide' | 'shrink' | 'elevate';
        "scrollThreshold"?: number;
        "variant"?: string;
    }
    interface UrUser {
        "followers"?: number;
        "onUserFollowClicked"?: (event: UrUserCustomEvent<any>) => void;
        "showStats"?: boolean;
        "userCover"?: any;
        "userCoverFallback"?: string;
        "userDescription"?: any;
        "userTitle"?: string;
    }
    interface UrUserProfile {
    }
    interface IntrinsicElements {
        "ur-avatar": UrAvatar;
        "ur-button": UrButton;
        "ur-button-arrow-left": UrButtonArrowLeft;
        "ur-button-arrow-right": UrButtonArrowRight;
        "ur-button-icon": UrButtonIcon;
        "ur-checkbox": UrCheckbox;
        "ur-checkbox-group": UrCheckboxGroup;
        "ur-chip": UrChip;
        "ur-dialog": UrDialog;
        "ur-hero": UrHero;
        "ur-linear-progress": UrLinearProgress;
        "ur-list": UrList;
        "ur-list-item": UrListItem;
        "ur-list-subheader": UrListSubheader;
        "ur-loader": UrLoader;
        "ur-locale-filter-button": UrLocaleFilterButton;
        "ur-locale-filter-panel": UrLocaleFilterPanel;
        "ur-logo": UrLogo;
        "ur-main-desktop-top-app-bar": UrMainDesktopTopAppBar;
        "ur-main-left-menu": UrMainLeftMenu;
        "ur-menu-item": UrMenuItem;
        "ur-menu-profile": UrMenuProfile;
        "ur-navigation-drawer": UrNavigationDrawer;
        "ur-novl": UrNovl;
        "ur-novl-carousel": UrNovlCarousel;
        "ur-page": UrPage;
        "ur-page-profile": UrPageProfile;
        "ur-profile": UrProfile;
        "ur-radio-button": UrRadioButton;
        "ur-radio-group": UrRadioGroup;
        "ur-read-desktop-top-app-bar": UrReadDesktopTopAppBar;
        "ur-read-mobile-top-app-bar": UrReadMobileTopAppBar;
        "ur-read-rail": UrReadRail;
        "ur-read-rail-mobile": UrReadRailMobile;
        "ur-reader": UrReader;
        "ur-segment-button": UrSegmentButton;
        "ur-select": UrSelect;
        "ur-switch": UrSwitch;
        "ur-tabs": UrTabs;
        "ur-text-field": UrTextField;
        "ur-tooltip": UrTooltip;
        "ur-top-app-bar": UrTopAppBar;
        "ur-user": UrUser;
        "ur-user-profile": UrUserProfile;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ur-avatar": LocalJSX.UrAvatar & JSXBase.HTMLAttributes<HTMLUrAvatarElement>;
            "ur-button": LocalJSX.UrButton & JSXBase.HTMLAttributes<HTMLUrButtonElement>;
            "ur-button-arrow-left": LocalJSX.UrButtonArrowLeft & JSXBase.HTMLAttributes<HTMLUrButtonArrowLeftElement>;
            "ur-button-arrow-right": LocalJSX.UrButtonArrowRight & JSXBase.HTMLAttributes<HTMLUrButtonArrowRightElement>;
            "ur-button-icon": LocalJSX.UrButtonIcon & JSXBase.HTMLAttributes<HTMLUrButtonIconElement>;
            "ur-checkbox": LocalJSX.UrCheckbox & JSXBase.HTMLAttributes<HTMLUrCheckboxElement>;
            "ur-checkbox-group": LocalJSX.UrCheckboxGroup & JSXBase.HTMLAttributes<HTMLUrCheckboxGroupElement>;
            "ur-chip": LocalJSX.UrChip & JSXBase.HTMLAttributes<HTMLUrChipElement>;
            "ur-dialog": LocalJSX.UrDialog & JSXBase.HTMLAttributes<HTMLUrDialogElement>;
            "ur-hero": LocalJSX.UrHero & JSXBase.HTMLAttributes<HTMLUrHeroElement>;
            "ur-linear-progress": LocalJSX.UrLinearProgress & JSXBase.HTMLAttributes<HTMLUrLinearProgressElement>;
            "ur-list": LocalJSX.UrList & JSXBase.HTMLAttributes<HTMLUrListElement>;
            "ur-list-item": LocalJSX.UrListItem & JSXBase.HTMLAttributes<HTMLUrListItemElement>;
            "ur-list-subheader": LocalJSX.UrListSubheader & JSXBase.HTMLAttributes<HTMLUrListSubheaderElement>;
            "ur-loader": LocalJSX.UrLoader & JSXBase.HTMLAttributes<HTMLUrLoaderElement>;
            "ur-locale-filter-button": LocalJSX.UrLocaleFilterButton & JSXBase.HTMLAttributes<HTMLUrLocaleFilterButtonElement>;
            "ur-locale-filter-panel": LocalJSX.UrLocaleFilterPanel & JSXBase.HTMLAttributes<HTMLUrLocaleFilterPanelElement>;
            "ur-logo": LocalJSX.UrLogo & JSXBase.HTMLAttributes<HTMLUrLogoElement>;
            "ur-main-desktop-top-app-bar": LocalJSX.UrMainDesktopTopAppBar & JSXBase.HTMLAttributes<HTMLUrMainDesktopTopAppBarElement>;
            "ur-main-left-menu": LocalJSX.UrMainLeftMenu & JSXBase.HTMLAttributes<HTMLUrMainLeftMenuElement>;
            "ur-menu-item": LocalJSX.UrMenuItem & JSXBase.HTMLAttributes<HTMLUrMenuItemElement>;
            "ur-menu-profile": LocalJSX.UrMenuProfile & JSXBase.HTMLAttributes<HTMLUrMenuProfileElement>;
            "ur-navigation-drawer": LocalJSX.UrNavigationDrawer & JSXBase.HTMLAttributes<HTMLUrNavigationDrawerElement>;
            "ur-novl": LocalJSX.UrNovl & JSXBase.HTMLAttributes<HTMLUrNovlElement>;
            "ur-novl-carousel": LocalJSX.UrNovlCarousel & JSXBase.HTMLAttributes<HTMLUrNovlCarouselElement>;
            "ur-page": LocalJSX.UrPage & JSXBase.HTMLAttributes<HTMLUrPageElement>;
            "ur-page-profile": LocalJSX.UrPageProfile & JSXBase.HTMLAttributes<HTMLUrPageProfileElement>;
            "ur-profile": LocalJSX.UrProfile & JSXBase.HTMLAttributes<HTMLUrProfileElement>;
            "ur-radio-button": LocalJSX.UrRadioButton & JSXBase.HTMLAttributes<HTMLUrRadioButtonElement>;
            "ur-radio-group": LocalJSX.UrRadioGroup & JSXBase.HTMLAttributes<HTMLUrRadioGroupElement>;
            "ur-read-desktop-top-app-bar": LocalJSX.UrReadDesktopTopAppBar & JSXBase.HTMLAttributes<HTMLUrReadDesktopTopAppBarElement>;
            "ur-read-mobile-top-app-bar": LocalJSX.UrReadMobileTopAppBar & JSXBase.HTMLAttributes<HTMLUrReadMobileTopAppBarElement>;
            "ur-read-rail": LocalJSX.UrReadRail & JSXBase.HTMLAttributes<HTMLUrReadRailElement>;
            "ur-read-rail-mobile": LocalJSX.UrReadRailMobile & JSXBase.HTMLAttributes<HTMLUrReadRailMobileElement>;
            "ur-reader": LocalJSX.UrReader & JSXBase.HTMLAttributes<HTMLUrReaderElement>;
            "ur-segment-button": LocalJSX.UrSegmentButton & JSXBase.HTMLAttributes<HTMLUrSegmentButtonElement>;
            "ur-select": LocalJSX.UrSelect & JSXBase.HTMLAttributes<HTMLUrSelectElement>;
            "ur-switch": LocalJSX.UrSwitch & JSXBase.HTMLAttributes<HTMLUrSwitchElement>;
            "ur-tabs": LocalJSX.UrTabs & JSXBase.HTMLAttributes<HTMLUrTabsElement>;
            "ur-text-field": LocalJSX.UrTextField & JSXBase.HTMLAttributes<HTMLUrTextFieldElement>;
            "ur-tooltip": LocalJSX.UrTooltip & JSXBase.HTMLAttributes<HTMLUrTooltipElement>;
            "ur-top-app-bar": LocalJSX.UrTopAppBar & JSXBase.HTMLAttributes<HTMLUrTopAppBarElement>;
            "ur-user": LocalJSX.UrUser & JSXBase.HTMLAttributes<HTMLUrUserElement>;
            "ur-user-profile": LocalJSX.UrUserProfile & JSXBase.HTMLAttributes<HTMLUrUserProfileElement>;
        }
    }
}
